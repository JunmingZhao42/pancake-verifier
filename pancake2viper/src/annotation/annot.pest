// The Pancake compiler converts newlines and tabs into multiple characters '\' 'n' 
// instead of using the newline character '\n'.
WHITESPACE = _{ " " | "\\t" | "\t" | "\\r" | "\\n" | NEWLINE }

integer = @{ ASCII_DIGIT+ }
ident = @{ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_" )* }

type = _{ int_t | bool_t | iarray_t | shape_t }
    int_t = { "Int" }
    bool_t = { "Bool" }
    iarray_t = { "IArray" }
    shape_t = { ("{" ~ shape_t ~ ("," ~ shape_t)* ~ "}") | "1" }
decl = { ident ~ ":" ~ type }

int_lit = @{ "-"? ~ integer}

bin_op = _{ add | sub | mul | div | modulo | imp | iff | viper_eq | viper_neq | pancake_eq | pancake_neq | gte | gt | lte | lt | bool_or | bool_and | bit_and | bit_or | bit_xor }
    add = { "+" }
    sub = { "-" }
    mul = { "*" }
    div = { "/" }
    modulo = { "%" }
    imp = { "==>" }
    iff = { "<==>" }
    viper_eq = { "===" }
    viper_neq = { "!==" }
    pancake_eq = { "==" }
    pancake_neq = { "!=" }
    gt = { ">" }
    gte = { ">=" }
    lt = { "<" }
    lte = { "<=" }
    bool_and = { "&&" }
    bool_or = { "||" }
    bit_and = { "&" }
    bit_or = { "|" }
    bit_xor = { "^" }

expr = !{ prefix? ~ primary ~ postfix? ~ (infix ~ prefix? ~ primary ~ postfix?)* }
    infix = _{ bin_op }
    prefix = _{ neg | minus }
        neg = { "!" }
        minus = { "-" }
    
    postfix = _{ field_acc | arr_acc | ternary | shift }
        field_acc = @{ ("." ~ field_idx)+ }
            field_idx = !{ integer }
        arr_acc = @{ "[" ~ expr ~ "]" }
        ternary = { "?" ~ expr ~ ":" ~ expr }
        shift = { shift_type ~ int_lit }
            shift_type = _{ lshr | ashr | lshl }
                lshr = { ">>>" }
                ashr = { ">>" }
                lshl = { "<<" }

    primary = _{ "(" ~ expr ~ ")" | unfolding | int_lit | quantified | acc_pred | acc_slice | old | f_call | field_acc | ident | biw | base }

        quantified = { (forall | exists) ~ decl ~ ("," ~ decl)* ~ "::" ~ triggers ~ expr }
            forall = { "forall" }
            exists = { "exists" }
            triggers = { "{" ~ expr ~ ("," ~ expr)* ~ "}" | "" }
        acc_slice = { "acc(" ~ ident ~ "[" ~ expr ~ (slice_inc | slice_exc) ~ expr ~ "]" ~ (("," ~ perm) | "") ~ ")" }
            slice_inc = { "..=" }
            slice_exc = { ".." }
        acc_pred = {"acc" ~ "(" ~ expr ~ (("," ~ perm) | "") ~ ")" }
            perm = _{ perm_write | perm_read | perm_wildcard | perm_frac | perm_var }
                perm_write = { "write" }
                perm_read = { "read" }
                perm_wildcard = { "wildcard" }
                perm_frac = { integer ~ "/" ~ integer }
                perm_var = { ident }

        old = {"old(" ~ expr ~ ")" }
        f_call = {ident ~ "(" ~ (expr ~ ("," ~ expr)* | "") ~ ")" }
        unfolding = { "unfolding" ~ f_call ~ "in" ~ expr }
        biw = { "@biw" }
        base = { "@base" }

annotation_comment = _{"@"? ~ WHITESPACE* ~ annotation ~ WHITESPACE* ~ "@"? }
annotation = { annotation_keyword ~ expr }
    annotation_keyword = _{ pre | post | invariant | assertion | refutation | assumption | inhale | exhale | fold | unfold }
        pre = { "requires" }
        post = { "ensures" }
        invariant = { "invariant" }
        assertion = { "assert" }
        refutation = { "refute" }
        assumption = { "assume" }
        inhale = { "inhale" }
        exhale = { "exhale" }
        fold = { "fold" }
        unfold = { "unfold" }

// TODO: change "/*" ~ "@" to "/*@" when Pancake parsing fixed
predicate = { "/*" ~ "@" ~ "predicate" ~ ident ~ "(" ~ pred_args ~ ")" ~ pred_body ~ "@"? ~ "*/" }
    pred_args = { (decl ~ ("," ~ decl)*) | "" }
    pred_body = { ("{" ~ expr ~ "}") | "" }

preposts = { annotation* }

function = { "/*" ~ "@" ~ "function" ~ ident ~ "(" ~ func_args ~ ")" ~ ":" ~ type ~ preposts ~ func_body ~ "@"? ~ "*/" }
    func_args = { (decl ~ ("," ~ decl)*) | "" }
    func_body = { ("{" ~ expr ~ "}") | "" }

method = { "/*" ~ "@" ~ "method" ~ ident ~ "(" ~ method_args ~ ")" ~ method_ret ~ preposts ~ "@"? ~ "*/" }
    method_args = { (decl ~ ("," ~ decl)*) | "" }
    method_ret = { (":" ~ "(" ~ decl ~ ("," ~ decl)* ~ ")") | "" }
