WHITESPACE = _{ " " | "\t" | NEWLINE }

integer = @{ ASCII_DIGIT+ }
ident = @{ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_" )* }

type = _{ int_t | bool_t | iarray_t }
    int_t = { "Int" }
    bool_t = { "Bool" }
    iarray_t = { "IArray" }
decl = { ident ~ ":" ~ type }

int_lit = @{ "-"? ~ integer}

bin_op = _{ add | sub | mul | div | modulo | imp | iff | viper_eq | viper_neq | pancake_eq | pancake_neq | gte | gt | lte | lt | bool_or | bool_and }
    add = { "+" }
    sub = { "-" }
    mul = { "*" }
    div = { "/" }
    modulo = { "%" }
    imp = { "==>" }
    iff = { "<==>" }
    viper_eq = { "===" }
    viper_neq = { "!==" }
    pancake_eq = { "==" }
    pancake_neq = { "!=" }
    gt = { ">" }
    gte = { ">=" }
    lt = { "<" }
    lte = { "<=" }
    bool_and = { "&&" }
    bool_or = { "||" }

// expr = { prefix? ~ primary ~ postfix? ~ (infix ~ prefix? ~ primary ~ postfix? )* }
expr = { prefix? ~ primary ~ (infix ~ prefix? ~ primary )* }
    infix = _{ bin_op }
    prefix = _{ neg | minus }
        neg = { "!" }
        minus = { "-" }
    postfix = _{ "!" }
    primary = _ { "(" ~ expr ~ ")" | int_lit | quantified | f_call | heap | ident }
        quantified = { (forall | exists) ~ decl ~ ("," ~ decl)* ~ "::" ~ triggers ~ expr }
            forall = { "forall" }
            exists = { "exists" }
            triggers = { "{" ~ expr ~ ("," ~ expr)* ~ "}" | "" }
        f_call = {ident ~ "(" ~ (expr ~ ("," ~ expr)* | "") ~ ")" }
        heap = { "heap[" ~ expr ~ "]" }

top_keywords = _{ pre | post | invariant | assertion | inhale | exhale }
    pre = { "requires" }
    post = { "ensures" }
    invariant = { "invariant" }
    assertion = { "assert" }
    inhale = { "inhale" }
    exhale = { "exhale" }

top = {"@"? ~ WHITESPACE* ~ top_keywords ~ expr ~ WHITESPACE* ~ "@"? }
