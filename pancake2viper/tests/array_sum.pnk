/* @ function sum(base: Int, len: Int): Int 
    requires base >= 0 && len >= 0
    requires base + len <= alen(heap)
    requires forall i: Int :: base <= i && i < base + len ==> acc(heap[i], read)
{
    len == 0 ? 0 : (heap[base + len - 1] + sum(base, len - 1))
} @*/

fun array_sum(1 arr, 1 len) {
    /*@ requires arr >= 0 && len >= 0 */
    /*@ requires arr % 8 == 0 @*/ // word-aligned
    /*@ requires arr / 8 + len <= alen(heap) @*/ // the array fits into the heap

    // Borrows whole array
    /*@ requires forall i: Int :: arr / 8 <= i && i < arr / 8 + len ==> acc(heap[i], read) @*/
    /*@ ensures forall i: Int :: arr / 8 <= i && i < arr / 8 + len ==> acc(heap[i], read) @*/

    /*@ ensures sum(arr / 8, len) == retval */

    var i = 0;
    var accu = 0;
    while (i < len) {
        /*@ invariant arr % 8 == 0 @*/
        /*@ invariant 0 <= i && i <= len @*/
        /*@ invariant forall i: Int :: arr / 8 <= i && i < arr / 8 + len ==> acc(heap[i], read) @*/
        /*@ invariant accu == sum(arr / 8, i) @*/
        var tmp = lds 1 arr + i * @biw;
        accu = accu + tmp;
        i = i + 1;
    }
    return accu;

}
